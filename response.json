[
    {
        "score": 12,
        "answer_id": 2492677,
        "question_id": 2492646,
        "body": "<p>Matlab doesn't know how to work with anything but it's own structures.</p>\n\n<p>Convert the string to a char:</p>\n\n<p><code>cName = char(name);</code></p>\n"
    },
    {
        "score": 6,
        "answer_id": 9686123,
        "question_id": 9683646,
        "body": "<p><strong>In short</strong>: Cell array is a <em>heterogeneous</em> container, regular array is <em>homogeneous</em>. This means that in a regular array all of the elements are of the same type, whereas in cell array, they can be different. You can read more about cell array <a href=\"https://stackoverflow.com/questions/9055015/difference-between-accessing-cell-elements-using-and-curly-or-normal-brac/9055336#9055336\">here</a>.</p>\n\n<p>Use <strong>cell array</strong> when:</p>\n\n<ul>\n<li>You have different types in your array</li>\n<li>You are not sure whether in the future you might extend it to another types</li>\n<li>You are working with objects that have an inheritance pattern</li>\n<li>You are working with an array of strings - almost in any occasion it is preferable to <em>char(n,m)</em></li>\n<li>You have a large array, and you often update a single element in a function - Due to Matlabs <em>copy-on-write</em> policy</li>\n<li>You are working with function handles (as @Pursuit explained)</li>\n</ul>\n\n<p>Prefer <strong>regular array</strong> when:</p>\n\n<ul>\n<li>All of the elements have the same type</li>\n<li>You are updating the whole array in one shot - like mathematical operations.</li>\n<li>You want to have type safety</li>\n<li>You will not change the data type of the array in the future</li>\n<li>You are working with mathematical matrices.</li>\n<li>You are working with objects that have no inheritance</li>\n</ul>\n\n<hr>\n\n<p>More explanation about <em>copy-on-write</em>:  </p>\n\n<p>When you pass an array to a function, a pointer/reference is passed. </p>\n\n<pre><code>function foo(x)\n     disp(x);\nend\n\nx= [1 2 3 4 5];\nfoo(x); %No copy is done here! A pointer is passed.\n</code></pre>\n\n<p>But when you change it (or a part of it), a copy is created. </p>\n\n<pre><code>function foo(x)\n    x(4) = x(4) + 1;\nend\n\nx= [1 2 3 4 5];\nfoo(x); %x is being copied! At least twice memory amount is needed.\n</code></pre>\n\n<p>In a cell array, only the cell is copied. </p>\n\n<pre><code>function foo(x)\n   x{4} = x{4} + 1;\nend\n\nx= {1 2 3 4 5}; %Only x{4} will be copied\n</code></pre>\n\n<p>Thus, if you call a function that changes a single element on a large array, you are making a lot of copies - that makes it slower. But in a cell array, it is not the case.</p>\n"
    },
    {
        "score": 5,
        "answer_id": 4654753,
        "question_id": 4654682,
        "body": "<p>You appear to have the closing bracket <code>]</code> for the format string in the wrong place. Try this:</p>\n\n<pre><code>fprintf(['# True Positive: %d \\n',...\n         '# False Positive: %d \\n',...\n         '# True Negative: %d \\n',...\n         '# False Negative: %d \\n'],...  %# Moved it to here...\n         numTruePos,...\n         numFalsePos,...\n         numTrueNeg,...\n         numFalseNeg);  %# ... from here\n</code></pre>\n"
    },
    {
        "score": 5,
        "answer_id": 12706728,
        "question_id": 12698433,
        "body": "<p><strong>Solution based on Eigen Decomposition</strong></p>\n\n<p>You can first compute PCA on <code>X'X</code> as @david said. Specifically, see the script below:</p>\n\n<pre><code>sz = [329150 132];\nX = rand(sz);\n\n[V D] = eig(X.' * X);\n</code></pre>\n\n<p>Actually, <code>V</code> holds the right singular vectors, and it holds the principal vectors if you put your data vectors in rows. The eigenvalues, <code>D</code>, are the variances among each direction. The singular vectors, which are the standard deviations, are computed as the square root of the variances: </p>\n\n<pre><code>S = sqrt(D);\n</code></pre>\n\n<p>Then, the left singular vectors, <code>U</code>, are computed using the formula <code>X = USV'</code>. Note that <code>U</code> refers to the principal components if your data vectors are in columns.</p>\n\n<pre><code>U = X*V*S^(-1);\n</code></pre>\n\n<p>Let us reconstruct the original data matrix and see the L2 reconstruction error:</p>\n\n<pre><code>X2 = U*S*V';\nL2ReconstructionError = norm(X(:)-X2(:))\n</code></pre>\n\n<p>It is almost zero:</p>\n\n<pre><code>L2ReconstructionError =\n  6.5143e-012\n</code></pre>\n\n<p>If your data vectors are in columns and you want to convert your data into eigenspace coefficients, you should do <code>U.'*X</code>.</p>\n\n<p>This code snippet takes around 3 seconds in my moderate 64-bit desktop.</p>\n\n<p><strong>Solution based on Randomized PCA</strong></p>\n\n<p>Alternatively, you can use a faster approximate method which is based on randomized PCA. Please see <a href=\"https://stats.stackexchange.com/a/11934/5025\">my answer in Cross Validated</a>. You can directly compute <code>fsvd</code> and get <code>U</code> and <code>V</code> instead of using <code>eig</code>.</p>\n\n<p>You may employ randomized PCA if the data size is too big. But, I think the previous way is sufficient for the size you gave.</p>\n"
    },
    {
        "score": 5,
        "answer_id": 17655380,
        "question_id": 17654452,
        "body": "<p>As you have an array containing both numeric and character data, what you want is impossible (and trust me, it would be impractical, too). </p>\n\n<p>Referencing individual numbers in a numeric array is different from referencing whole strings. There is simply no escaping that, nor should there be: you treat flowers differently from how you treat people (I sure hope so anyway). </p>\n\n<p>In MATLAB, a string is an ordinary array, with the difference that each entry of the array does not represent a number, but a character. Referencing individual characters goes the same as referencing numbers in arrays: </p>\n\n<pre><code>&gt;&gt; a = 'my string'\n&gt;&gt; a(4)\nans = \ns\n&gt;&gt; a+0  % cast to double to show the \"true character\" of strings\nans =\n    109   121    32   115   116   114   105   110   103\n</code></pre>\n\n<p>However, <code>textscan</code> assumes (rightfully so) that you don't want to do <em>that</em>, but rather you want to extract <em>whole strings</em> from the file. And whole strings should be referenced differently, to indicate that you mean whole strings and not individual characters. </p>\n\n<p>I think you'll find it all a bit more intuitive if you split the results from <code>textscan</code> up into an ordinary numeric array and a cell array of strings, like so: </p>\n\n<pre><code>% load the data\nftest = fopen('test.csv');\nC = textscan(ftest,...\n    '%f %s %f %f %f %f %f %f %s %s %f %f',...     \n    'collectoutput', true,...\n    'Delimiter',',\\n');\nfclose(ftest);\n\n% split into numeric and char arrays\nnumeric = [C{[1 3 5]}]\nalpha   = [C{[2 4]}]\n</code></pre>\n\n<p>Referencing data in <code>numeric</code> then follows the same rules as any ordinary array, and referencing the strings in <code>alpha</code> then follows the normal cell-referencing rules (as in <code>alpha{2,1}</code> to get <code>'03/05/1986'</code>)</p>\n\n<p><strong>EDIT</strong> Based no your comments, you want to do the conversion like this: </p>\n\n<pre><code>% Read the data\nfid = fopen('test.csv', 'r');\nC = textscan(fid,...\n    '%f %s %f %f %f %f %f %f %s %s %f %f',...\n    'Headerlines', 1,...\n    'Delimiter',',');\nfclose(fid);\n\n% Delete 10th element ('ASC')\nC(10) = [];\n\n% Mass-convert dates to datenums\nC{2} = datenum(C{2}, 'dd/mm/yyyy');\n\n% Map 'P' to 1 and 'C' to 2\nmap('PC') = [1 2];\nC{9} = map([C{9}{:}]).';\n\n% Convert whole array to numeric array\nC = [C{:}];\n</code></pre>\n"
    },
    {
        "score": 4,
        "answer_id": 2492666,
        "question_id": 2492646,
        "body": "<p>never mind, I figured it out, you have to use the <code>char()</code> method explicitly:</p>\n\n<pre><code>K&gt;&gt; ['my name is ' char(name)]\n\nans =\n\nmy name is Jason\n</code></pre>\n"
    },
    {
        "score": 4,
        "answer_id": 2493747,
        "question_id": 2492646,
        "body": "<p>As an alternative to using <code>char()</code> you can also use the java string methods. So</p>\n\n<pre><code>cName = name.toCharArray()'\n</code></pre>\n\n<p>Will return a MATLAB character array.</p>\n"
    },
    {
        "score": 4,
        "answer_id": 13575932,
        "question_id": 13575523,
        "body": "<p>You can use array fun, followed by another max to do this:</p>\n\n<pre><code>s.x = [1 3 4];\ns(2).x = [9 8];\ns(3).x = [1];\n\nmaxVals = arrayfun(@(struct)max(struct.x(:)),s);\n\nmaxMaxVals = max(maxVals(:));\n</code></pre>\n\n<p>Or, if you want to retain the size of .x after MAX:</p>\n\n<pre><code>s.x = [1 3 4];\ns(2).x = [9 8 3];\ns(3).x = [1 2 2; 3 2 3];\n\nmaxVals = arrayfun(@(struct)max(struct.x,[],1),s,'uniformoutput',false);\n\nmaxMaxVals = max(cat(1,maxVals{:}))\n</code></pre>\n\n<p>Or, if you know everything is n x 3</p>\n\n<pre><code>s.x = [1 3 4];\ns(2).x = [9 8 3];\ns(3).x = [1 2 2; 3 2 3];\nmatrix = cat(1,s.x)\nmaxVals = max(matrix)\n</code></pre>\n"
    },
    {
        "score": 3,
        "answer_id": 9684949,
        "question_id": 9683646,
        "body": "<p>Function handles are actually the exception here, and the reason is that the Matlab syntax becomes surprising if you allow function handles to be a part of non-cell array.  For example</p>\n\n<pre><code>a = @(x)x+1;\na(2);  %This returns 2\n</code></pre>\n\n<p>But, if arrays of function handles were supported, then</p>\n\n<pre><code>b = [@(x)x+1,  @(x)x+2];\nb(2);                  %This would return @(x)x+2\nb(3) = @(x)x+3;        %This would extend the size of the array\n</code></pre>\n\n<p>So then would this be allowed?</p>\n\n<pre><code>a(2) = @(x)x+2;       %Would this extend the size of the previously scalar array\n</code></pre>\n\n<hr>\n\n<p>Longwinded edit:  This is documented in the <a href=\"http://www.mathworks.com/help/releases/R14/techdoc/rn/prog_upg.html#1000121\" rel=\"nofollow\">release notes accompanying release R14</a>, which was the first release allowing anonymous functions.  Prior to R14 you could create function handles as references to m-file functions, and they could be placed in non-cell arrays.  These could only be called using <code>feval</code> (e.g.:  <code>fnSin = @sin;  output = feval(fnSin, pi)</code>).  </p>\n\n<p>When anonymous functions were introduced, the Mathworks updated the syntax to allow a simpler calling convention (e.g.  <code>fnSin = @sin;  output = fnSin(pi)</code>) which had the effect of causing an ambiguity when using non-cell array of function handles.  It looks like they did their best to grandfather this new behavior in, but those grandfathered conditions have certainly expired (this was 2004).</p>\n"
    },
    {
        "score": 2,
        "answer_id": 9685870,
        "question_id": 9683646,
        "body": "<p>The arrays can store only data with a fixed length. For instance, double, single, char, logical, integer.\nThe reason is that (I guess) they are stored directly in a block of memory. On the other hand cells are stored as a list of pointers, each pointer can point to a data of different size.</p>\n\n<p>That's why arrays cannot store strings, function handle, arrays, and multiple data types.\nThose type can have different length. For instance 'bla' has 3 bytes, 'blabla' has 6 bytes. Therefore if they are stored in the same memory block, if you want to change 'bla' into 'blabla' you would have to shift all the rest of the memory, which would be very slow, and so it's not handled.</p>\n"
    }
]